[project]
name = "gigachatagents"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "dotenv>=0.9.9",
    "gigachat>=0.1.39.post2",
    "google-genai>=1.23.0",
    "httpx>=0.28.1",
    "langchain-gigachat>=0.3.10",
    "langgraph>=0.4.8",
    "pandas>=2.3.0",
    "pdfplumber>=0.11.7",
    "python-dotenv>=1.1.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pre-commit-hooks>=5.0.0",
    "ruff>=0.12.0",
]
testing = [
    "pytest>=8.4.1",
]
tests = [
    "pytest-cov>=6.2.1",
]

[tool.black]
line-length = 120

[tool.ruff]
target-version = "py313"  # Минимальная версия Python
line-length = 120  # Максимальная длина строки (по умолчанию 88)
indent-width = 4  # Ширина отступа (по умолчанию 4)
fix = true
exclude = [".mypy_cache", ".pytest_cache", ".ruff_cache", ".venv"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy
    "AIR",  # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # ruff-specific rules
]
ignore = [
    "BLE001",
    "D100",
    "D413",
    "EM101",
    "ERA001",
    "FIX002",
    "G201",
    "INP001",
    "PGH003",
    "PLR1711",
    "RET501",
    "RUF001",
    "TD002",
    "TD003",
    "TD004",
    "TRY003",
]
per-file-ignores = {"__init__.py" = ["F401"], "test*" = ["S101"]}

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
line-ending = "lf"
docstring-code-line-length = 120

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["src"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
docstring-quotes = "double"
multiline-quotes = "double"
avoid-escape = true

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.flake8-annotations]
# Разрешить *args и **kwargs без аннотаций
allow-star-arg-any = true
suppress-none-returning = false


[tool.mypy]
explicit_package_bases = true
namespace_packages = true
ignore_missing_imports = true

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["testing/"]
python_files = ["test_*.py", "*_test.py", "tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
log_level = "INFO"
showlocals = true
addopts = [
    "-v",                    # verbose
    "--tb=short",           # короткий traceback
    "--strict-markers",     # строгая проверка markers
    "--disable-warnings",   # отключить warnings
    "--color=yes",          # цветной вывод
    "--durations=10",       # показать 10 самых медленных тестов
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/migrations/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
